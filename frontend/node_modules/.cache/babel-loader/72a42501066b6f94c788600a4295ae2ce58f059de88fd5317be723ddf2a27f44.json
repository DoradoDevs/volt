{"ast":null,"code":"// backend/src/server.js\nrequire('dotenv').config();\nconst express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst routes = require('./routes');\nconst app = express();\n\n// --- core middleware ---\napp.use(helmet());\napp.use(cors({\n  origin: ['http://localhost:3000'],\n  credentials: true\n}));\napp.use(express.json({\n  limit: '1mb'\n}));\napp.use(morgan('dev'));\n\n// --- mount API routes at root ---\napp.use('/', routes);\n\n// simple health check\napp.get('/health', (_req, res) => res.json({\n  ok: true\n}));\n\n// 404 fallback (must come after routes)\napp.use((req, res) => {\n  res.status(404).json({\n    error: 'Not Found',\n    path: req.originalUrl\n  });\n});\n\n// error handler (so we see useful errors)\napp.use((err, _req, res, _next) => {\n  console.error('Unhandled error:', err);\n  res.status(500).json({\n    error: 'Server error',\n    detail: err.message\n  });\n});\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`VolT backend listening on http://localhost:${PORT}`);\n});\nmodule.exports = app;","map":{"version":3,"names":["require","config","express","cors","helmet","morgan","routes","app","use","origin","credentials","json","limit","get","_req","res","ok","req","status","error","path","originalUrl","err","_next","console","detail","message","PORT","process","env","listen","log","module","exports"],"sources":["C:/Users/Clock/OneDrive/Desktop/volt/volt/frontend/src/server.js"],"sourcesContent":["// backend/src/server.js\r\nrequire('dotenv').config();\r\n\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst helmet = require('helmet');\r\nconst morgan = require('morgan');\r\n\r\nconst routes = require('./routes');\r\n\r\nconst app = express();\r\n\r\n// --- core middleware ---\r\napp.use(helmet());\r\napp.use(cors({ origin: ['http://localhost:3000'], credentials: true }));\r\napp.use(express.json({ limit: '1mb' }));\r\napp.use(morgan('dev'));\r\n\r\n// --- mount API routes at root ---\r\napp.use('/', routes);\r\n\r\n// simple health check\r\napp.get('/health', (_req, res) => res.json({ ok: true }));\r\n\r\n// 404 fallback (must come after routes)\r\napp.use((req, res) => {\r\n  res.status(404).json({ error: 'Not Found', path: req.originalUrl });\r\n});\r\n\r\n// error handler (so we see useful errors)\r\napp.use((err, _req, res, _next) => {\r\n  console.error('Unhandled error:', err);\r\n  res.status(500).json({ error: 'Server error', detail: err.message });\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`VolT backend listening on http://localhost:${PORT}`);\r\n});\r\n\r\nmodule.exports = app;\r\n"],"mappings":"AAAA;AACAA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;AAE1B,MAAMC,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMK,MAAM,GAAGL,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAMM,MAAM,GAAGN,OAAO,CAAC,UAAU,CAAC;AAElC,MAAMO,GAAG,GAAGL,OAAO,CAAC,CAAC;;AAErB;AACAK,GAAG,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAC,CAAC;AACjBG,GAAG,CAACC,GAAG,CAACL,IAAI,CAAC;EAAEM,MAAM,EAAE,CAAC,uBAAuB,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC,CAAC,CAAC;AACvEH,GAAG,CAACC,GAAG,CAACN,OAAO,CAACS,IAAI,CAAC;EAAEC,KAAK,EAAE;AAAM,CAAC,CAAC,CAAC;AACvCL,GAAG,CAACC,GAAG,CAACH,MAAM,CAAC,KAAK,CAAC,CAAC;;AAEtB;AACAE,GAAG,CAACC,GAAG,CAAC,GAAG,EAAEF,MAAM,CAAC;;AAEpB;AACAC,GAAG,CAACM,GAAG,CAAC,SAAS,EAAE,CAACC,IAAI,EAAEC,GAAG,KAAKA,GAAG,CAACJ,IAAI,CAAC;EAAEK,EAAE,EAAE;AAAK,CAAC,CAAC,CAAC;;AAEzD;AACAT,GAAG,CAACC,GAAG,CAAC,CAACS,GAAG,EAAEF,GAAG,KAAK;EACpBA,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;IAAEQ,KAAK,EAAE,WAAW;IAAEC,IAAI,EAAEH,GAAG,CAACI;EAAY,CAAC,CAAC;AACrE,CAAC,CAAC;;AAEF;AACAd,GAAG,CAACC,GAAG,CAAC,CAACc,GAAG,EAAER,IAAI,EAAEC,GAAG,EAAEQ,KAAK,KAAK;EACjCC,OAAO,CAACL,KAAK,CAAC,kBAAkB,EAAEG,GAAG,CAAC;EACtCP,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACP,IAAI,CAAC;IAAEQ,KAAK,EAAE,cAAc;IAAEM,MAAM,EAAEH,GAAG,CAACI;EAAQ,CAAC,CAAC;AACtE,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AACrCpB,GAAG,CAACuB,MAAM,CAACH,IAAI,EAAE,MAAM;EACrBH,OAAO,CAACO,GAAG,CAAC,8CAA8CJ,IAAI,EAAE,CAAC;AACnE,CAAC,CAAC;AAEFK,MAAM,CAACC,OAAO,GAAG1B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}